reticulate::repl_python()
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
# Nạp thư viện
library(ggplot2)
library(tseries)
# Đọc file CSV (đảm bảo file MSFT_prices_2013_present.csv nằm trong thư mục làm việc)
data <- read.csv("MSFT_prices_2013_present.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
install.packages(c("ggplot2", "tseries"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
# Nạp thư viện
library(ggplot2)
library(tseries)
# Đọc file CSV (đảm bảo file MSFT_prices_2013_present.csv nằm trong thư mục làm việc)
data <- read.csv("MSFT_prices_2013_present.csv")
# Kiểm tra cấu trúc dữ liệu
str(data)
head(data)
# Nếu cột date là kiểu ký tự, chuyển sang date
data$date <- as.date(data$date)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
# Vẽ biểu đồ giá đóng cửa (close)
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "steelblue") +
labs(title = "MSFT Adjusted Closing Prices (2013 - Present)",
x = "date",
y = "Adjusted Close Price (USD)") +
theme_minimal()
ggplot2(data, aes(x = date, y = close)) +
geom_line(color = "steelblue") +
labs(title = "MSFT Adjusted Closing Prices (2013 - Present)",
x = "date",
y = "Adjusted Close Price (USD)") +
theme_minimal()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries"))
# Nạp thư viện
library(ggplot2)
library(tseries)
# Đọc file CSV
data <- read.csv("MSFT_prices_2013_present.csv")
# Chuyển cột date sang kiểu Date
data$date <- as.Date(data$date)
# Kiểm tra dữ liệu
head(data)
# Vẽ biểu đồ giá đóng cửa
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "steelblue") +
labs(title = "MSFT Closing Prices (2013 - Present)",
x = "Date",
y = "Closing Price (USD)") +
theme_minimal()
# Kiểm định tính dừng bằng Augmented Dickey-Fuller test
adf_result <- adf.test(data$close)
# In kết quả
print(adf_result)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries", "forecast"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries", "forecast"))
# Kiểm định ADF cho chuỗi sai phân bậc 1
cat("\nADF test for First Difference (d=1):\n")
adf_result_1 <- adf.test(na.omit(data$diff1))
View(data)
View(data)
View(adf_result)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Đọc file CSV
data <- read.csv("MSFT_prices_2013_present.csv")
# Chuyển cột date sang kiểu Date
data$date <- as.Date(data$date)
# --- 1️⃣ Biểu đồ giá đóng cửa gốc ---
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "steelblue") +
labs(title = "MSFT Closing Prices (Original Series)",
x = "Date", y = "Closing Price (USD)") +
theme_minimal()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries", "forecast"))
# Biểu đồ sai phân bậc 2
ggplot(data[-c(1:2), ], aes(x = date[-c(1:2)], y = diff2)) +
geom_line(color = "seagreen") +
labs(title = "Second Difference of Closing Prices (d=2)",
x = "Date", y = "Second Difference") +
theme_minimal()
# Biểu đồ sai phân bậc 2
ggplot(data[-c(1:2), ], aes(x = date[-c(1:2)], y = diff2)) +
geom_line(color = "seagreen") +
labs(title = "Second Difference of Closing Prices (d=2)",
x = "Date", y = "Second Difference") +
theme_minimal()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài đặt (nếu chưa có)
install.packages(c("ggplot2", "tseries", "forecast"))
adf_result_1 <- adf.test(na.omit(data$diff1))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# --- PACKAGE INSTALL (bỏ comment nếu cài lần đầu) ---
# install.packages(c("ggplot2", "tseries", "forecast", "gridExtra"))
# --- LOAD LIBRARIES ---
library(ggplot2)
library(tseries)    # adf.test
library(forecast)   # Acf, Pacf, ggtsdisplay (nếu cần)
library(gridExtra)  # arrange plots
# --- PACKAGE INSTALL (bỏ comment nếu cài lần đầu) ---
# install.packages(c("ggplot2", "tseries", "forecast", "gridExtra"))
install.package(gridExtra)
# --- PACKAGE INSTALL (bỏ comment nếu cài lần đầu) ---
# install.packages(c("ggplot2", "tseries", "forecast", "gridExtra"))
install.packagse(gridExtra)
# --- PACKAGE INSTALL (bỏ comment nếu cài lần đầu) ---
# install.packages(c("ggplot2", "tseries", "forecast", "gridExtra"))
install.packagse(c("gridExtra"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Cài thư viện cần thiết
install.packages(c("ggplot2", "tseries", "forecast"))
# Đọc dữ liệu
data <- read.csv("MSFT_prices_2013_present.csv")
# Đổi kiểu dữ liệu
data$date <- as.Date(data$date)
# Xem vài dòng đầu
head(data)
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "blue") +
labs(title = "MSFT Closing Prices (2013 - Present)",
x = "Date", y = "Closing Price (USD)") +
theme_minimal()
library(ggplot2)
library(tseries)
library(forecast)
# Đọc dữ liệu
data <- read.csv("MSFT_prices_2013_present.csv")
# Đổi kiểu dữ liệu
data$date <- as.Date(data$date)
# Xem vài dòng đầu
head(data)
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "blue") +
labs(title = "MSFT Closing Prices (2013 - Present)",
x = "Date", y = "Closing Price (USD)") +
theme_minimal()
adf_test <- adf.test(data$close)
adf_test
data$diff_close <- diff(data$close)
data$diff_close <- c(NA, diff(data$close))
# Vẽ lại sai phân
ggplot(data[-1,], aes(x = date, y = diff_close)) +
geom_line(color = "darkgreen") +
labs(title = "Differenced MSFT Closing Prices",
x = "Date", y = "Differenced Close") +
theme_minimal()
# Kiểm tra lại tính dừng
adf.test(na.omit(data$diff_close))
adf.test(na.omit(data$diff_close))
# Đọc dữ liệu
data <- read.csv("MSFT_prices_2013_present.csv")
# Đổi kiểu dữ liệu
data$date <- as.Date(data$date)
# Xem vài dòng đầu
head(data)
ggplot(data, aes(x = date, y = close)) +
geom_line(color = "blue") +
labs(title = "MSFT Closing Prices (2013 - Present)",
x = "Date", y = "Closing Price (USD)") +
theme_minimal()
adf_test <- adf.test(data$close)
adf_test
data$diff_close <- c(NA, diff(data$close))
# Vẽ lại sai phân
ggplot(data[-1,], aes(x = date, y = diff_close)) +
geom_line(color = "darkgreen") +
labs(title = "Differenced MSFT Closing Prices",
x = "Date", y = "Differenced Close") +
theme_minimal()
# Kiểm tra lại tính dừng
adf.test(na.omit(data$diff_close))
# Vẽ ACF và PACF cho chuỗi sai phân (đã có tính dừng)
par(mfrow = c(1, 2))   # chia đồ thị ra 2 ô ngang
acf(na.omit(data$diff_close), main = "ACF - Differenced MSFT Close")
pacf(na.omit(data$diff_close), main = "PACF - Differenced MSFT Close")
par(mfrow = c(1, 1))   # reset lại layout
library(forecast)
# --- 1️⃣ Chia dữ liệu train và test ---
n <- nrow(data)
train_size <- round(n * 0.8)   # 80% train, 20% test
train <- data$close[1:train_size]
test <- data$close[(train_size + 1):n]
# --- 2️⃣ Xây dựng mô hình ARIMA (ví dụ: ARIMA(1,1,1)) ---
model <- Arima(train, order = c(1,1,1))
summary(model)
# --- 3️⃣ Dự báo trên tập test ---
forecast_horizon <- length(test)
forecast_result <- forecast(model, h = forecast_horizon)
# --- 4️⃣ Plot kết quả dự báo ---
autoplot(forecast_result) +
autolayer(test, series = "Actual", color = "red") +
labs(title = "ARIMA Forecast vs Actual MSFT Prices",
x = "Time", y = "Closing Price (USD)") +
theme_minimal()
# --- 4️⃣ Plot kết quả dự báo ---
autoplot(forecast_result) +
autolayer(test, series = "Actual", color = "red") +
labs(title = "ARIMA Forecast vs Actual MSFT Prices",
x = "Time", y = "Closing Price (USD)") +
theme_minimal()
library(forecast)
library(ggplot2)
# --- 1️⃣ Chia dữ liệu train và test ---
n <- nrow(data)
train_size <- round(n * 0.8)
train <- data$close[1:train_size]
test <- data$close[(train_size + 1):n]
# Chuyển train/test thành chuỗi thời gian (ts object)
train_ts <- ts(train, frequency = 1)
test_ts <- ts(test, frequency = 1, start = end(train_ts)[1] + 1)
# --- 2️⃣ Xây dựng mô hình ARIMA ---
model <- Arima(train_ts, order = c(1,1,1))
summary(model)
# --- 3️⃣ Dự báo ---
forecast_horizon <- length(test_ts)
forecast_result <- forecast(model, h = forecast_horizon)
# --- 4️⃣ Vẽ biểu đồ dự báo ---
autoplot(forecast_result) +
autolayer(test_ts, series = "Actual", colour = "red") +
labs(title = "ARIMA Forecast vs Actual MSFT Prices",
x = "Time", y = "Closing Price (USD)") +
theme_minimal()
# --- 4️⃣ Vẽ biểu đồ dự báo ---
autoplot(forecast_result) +
autolayer(test_ts, series = "Actual", colour = "red") +
labs(title = "ARIMA Forecast vs Actual MSFT Prices",
x = "Time", y = "Closing Price (USD)") +
theme_minimal()
library(forecast)
library(ggplot2)
# --- 1️⃣ Chia dữ liệu train / test ---
n <- nrow(data)
train_size <- round(n * 0.8)
train <- data$close[1:train_size]
test <- data$close[(train_size + 1):n]
# --- 2️⃣ Chuyển sang dạng chuỗi thời gian ---
train_ts <- ts(train, frequency = 1)
test_ts <- ts(test, frequency = 1, start = end(train_ts)[1] + 1)
# --- 3️⃣ Huấn luyện mô hình ARIMA ---
model <- Arima(train_ts, order = c(1,1,1))
summary(model)
# --- 4️⃣ Dự báo ---
forecast_horizon <- length(test_ts)
forecast_result <- forecast(model, h = forecast_horizon)
# --- 5️⃣ Plot kết quả ---
autoplot(forecast_result) +
autolayer(test_ts, series = "Actual", color = "red") +  # đổi colour -> color
labs(title = "ARIMA Forecast vs Actual MSFT Prices",
x = "Time", y = "Closing Price (USD)") +
theme_minimal()
# --- Đánh giá mô hình ---
# Lấy giá trị dự báo và giá trị thực tế
predicted <- as.numeric(forecast_result$mean)
actual <- as.numeric(test_ts)
# Tính các chỉ số đánh giá
MAE  <- mean(abs(predicted - actual))
MSE  <- mean((predicted - actual)^2)
RMSE <- sqrt(MSE)
MAPE <- mean(abs((predicted - actual) / actual)) * 100
# In kết quả
cat("Model Evaluation Metrics:\n")
cat("MAE  =", round(MAE, 4), "\n")
cat("MSE  =", round(MSE, 4), "\n")
cat("RMSE =", round(RMSE, 4), "\n")
cat("MAPE =", round(MAPE, 2), "%\n")
